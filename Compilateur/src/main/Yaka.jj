/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)
package main;

import ident.*;
import implementation.*;
import generation.*;

public class Yaka {
  public static Declaration declaration;
  //pilou
  public static TabIdent tabIdent;
  public static Expression expression;
  public static Instruction instruction;
  public static Iteration iteration;
  public static Conditionnelle conditionnelle;
  public static ImplFonction fonction;
  public static YVM yvm;

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input; 
  
    tabIdent = new TabIdent();
    expression = new Expression();
    declaration = new Declaration();
    instruction = new Instruction();
    iteration = new Iteration();
    conditionnelle = new Conditionnelle();
    fonction = new ImplFonction();
    yvm = new YVMasm();
    


    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> <ident>	{yvm.entete();} 
   (declFonction())*
   <PRINCIPAL>{yvm.princ();} 
   bloc()
   <FPRINCIPAL>
   <FPROGRAMME> {yvm.queue();}
}

void bloc() : {} {
 (declConst())*
 (declVar())*		{yvm.ouvreBloc((declaration.getOffsetCompteur()+2)* (-1));}
   suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> {declaration.addConst(YakaTokenManager.identLu);} 	  	
   "=" valConst()
    
}

void valConst() : {}{
  <entier> 	{declaration.setValeur(Type.ENTIER , YakaTokenManager.entierLu);} 	
 | <ident>	{declaration.setValeur(YakaTokenManager.identLu);}	
 | <VRAI> 	{declaration.setValeur(Type.BOOLEEN , -1);}
 | <FAUX> 	{declaration.setValeur(Type.BOOLEEN , 0);}
}


void declVar() : {}
{
  <VAR> type()	<ident>	  {declaration.addIdent(YakaTokenManager.identLu);}   ("," <ident> {declaration.addIdent(YakaTokenManager.identLu);} )*  ";"
}

void type() :{}
{
   <ENTIER>  {declaration.setType(Type.ENTIER);}		
 | <BOOLEEN>	{declaration.setType(Type.BOOLEEN);}		
}
/*
 * Syntaxe des instructions.
 */
/*
*****Remplace par suiteInstr()******
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }
*/


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() 
  {expression.calcul();})?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	
   {expression.calcul();})*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	
  {expression.calcul();})*
}
void facteur() : {}
{   
  opNeg() primaire() {expression.calcul();} | primaire()
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 	{expression.empileIdent(new IdConst(Type.ENTIER, YakaTokenManager.entierLu),null);}
 | <ident> {expression.empileIdent(tabIdent.chercheIdent(YakaTokenManager.identLu),YakaTokenManager.identLu);} (argumentsFonction() {fonction.depile();expression.call();})? 	
 | <VRAI> 	{expression.empileIdent(new IdConst(Type.BOOLEEN, -1),null);}	
 | <FAUX> 	{expression.empileIdent(new IdConst(Type.BOOLEEN, 0),null);}	
 
}

void opRel() : {}
{
   "=" 		{expression.empileOp(Operateur.EG);}
 | "<>" 	{expression.empileOp(Operateur.DIF);}
 | "<" 		{expression.empileOp(Operateur.INF);}
 | "<=" 	{expression.empileOp(Operateur.INFEG);}
 | ">" 		{expression.empileOp(Operateur.SUP);}
 | ">=" 	{expression.empileOp(Operateur.SUPEG);}
} 

void opAdd() : {}
{
    "+"		{expression.empileOp(Operateur.PLUS);}
  |  "-"  {expression.empileOp(Operateur.MOINS);}
  | <OU> 	{expression.empileOp(Operateur.OU);}
}

void opMul() : {}
{
  "*"		{expression.empileOp(Operateur.FOIS);}
  | "/"		{expression.empileOp(Operateur.DIV);}
  | <ET>	{expression.empileOp(Operateur.ET);}
} 

void opNeg() : {}
{ "-" 		{expression.empileOp(Operateur.NEG);}
 | <NON>	{expression.empileOp(Operateur.NON);}
}

/******Affectation, entrees, sorties*******/
void suiteInstr() : {}
{
	(instruction() (";" (instruction())? )*)? 
}

void instruction() : {}
{
	affectation()
	| lecture()
	| ecriture()
	| iteration()
	| conditionnel()
	| retourne()
}

void affectation() : {}
{
	<ident>{expression.addDest(tabIdent.chercheLocal(YakaTokenManager.identLu));}	 "=" expression() {expression.end();}
}

void lecture() : {}
{
	<LIRE> "(" <ident> {instruction.lireEnt(YakaTokenManager.identLu);} ")"
}

void ecriture() : {}
{
	<ECRIRE> "(" ecrire() ")"
	| <ALALIGNE> {instruction.aLaligne();}
}

void ecrire() : {}
{
	expression() {instruction.ecrire(expression.depile());}
	| <chaine> {instruction.ecrireChaine(YakaTokenManager.chaineLue);}
}

/******Iterations*******/
void iteration() : {}
{
	<TANTQUE> {Yaka.iteration.tantque();} expression() {iteration.iffaux(expression.depile());}
	<FAIRE> suiteInstr()
	<FAIT> {Yaka.iteration.fait();}
}





/******Conditionnel*******/

void conditionnel() : {}
{
	<SI> expression() {conditionnelle.condition(expression.depile());}<ALORS> suiteInstr()  sinon()  
}

void sinon() : {}
{
    <SINON> {conditionnelle.sinon();} suiteInstr() <FSI> {conditionnelle.fin();}|  <FSI> {conditionnelle.sinon();conditionnelle.fin();}
}



/*******Fonctions*******/

void declFonction() : {}
{
	type() {declaration.addFonction(YakaTokenManager.identLu);} <FONCTION> 
	<ident> {yvm.ichaine(YakaTokenManager.identLu);} {declaration.setFonction(YakaTokenManager.identLu);} paramForms() {declaration.setOffset();}
		bloc()
	<FFONCTION> {fonction.fermeBloc ();}
}

void paramForms() : {}
{
	"(" ( paramForm() ("," paramForm() )* )? ")"
}

void paramForm() : {}
{
	type() {declaration.addParametre(YakaTokenManager.identLu);} <ident> {declaration.setParametre(YakaTokenManager.identLu);}
}

void retourne() : {}
{
	<RETOURNE> {yvm.ireturn(tabIdent.globaux.get(tabIdent.last).nbParam()*2+4);} expression()
}

void argumentsFonction() : {}
{
	"(" ( expression() {fonction.testParam(expression.depile());} ("," expression(){fonction.testParam(expression.depile());})* )? ")"
}